"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1510],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return p}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,u=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),m=c(t),p=o,f=m["".concat(u,".").concat(p)]||m[p]||d[p]||l;return t?r.createElement(f,i(i({ref:n},s),{},{components:t})):r.createElement(f,i({ref:n},s))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,i=new Array(l);i[0]=m;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var c=2;c<l;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1492:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return m}});var r=t(7462),o=t(3366),l=(t(7294),t(3905)),i=["components"],a={id:"call-from-nodejs",title:"Call from Node.js"},u=void 0,c={unversionedId:"module/call-from-nodejs",id:"module/call-from-nodejs",title:"Call from Node.js",description:"To use the cloud Node.js module from a Node.js script or another Node.js module, you need first to import the client module that was generated after build. You also need to import the Warp Engine that will provide you access to the functions of the module you want to use in your script.",source:"@site/docs/module/call-from-nodejs.md",sourceDirName:"module",slug:"/module/call-from-nodejs",permalink:"/docs/module/call-from-nodejs",tags:[],version:"current",frontMatter:{id:"call-from-nodejs",title:"Call from Node.js"},sidebar:"mainSidebar",previous:{title:"Call from browser using HTML",permalink:"/docs/module/call-from-html"},next:{title:"Frontend frameworks integration",permalink:"/docs/module/integrates-in-frameworks"}},s=[{value:"Import the client module",id:"import-the-client-module",children:[],level:2},{value:"Load Warp engine",id:"load-warp-engine",children:[{value:"Using a require",id:"using-a-require",children:[],level:3}],level:2},{value:"Get client module functions and use them",id:"get-client-module-functions-and-use-them",children:[],level:2},{value:"Full example",id:"full-example",children:[],level:2}],d={toc:s};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"To use the cloud Node.js module from a Node.js script or another Node.js module, you need first to import the client module that was generated after build. You also need to import the Warp Engine that will provide you access to the functions of the module you want to use in your script."),(0,l.kt)("h2",{id:"import-the-client-module"},"Import the client module"),(0,l.kt)("p",null,"In order to use it from HTML, the client module should have been build in ",(0,l.kt)("inlineCode",{parentName:"p"},"umd")," format. "),(0,l.kt)("p",null,"Then you can requires it with its path:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const MicroService = require('./client_module.js')\n")),(0,l.kt)("h2",{id:"load-warp-engine"},"Load Warp engine"),(0,l.kt)("p",null,"Warp engine provides you the way to call functions of your client module.\nYou have to load it using a Warp engine module dependency. "),(0,l.kt)("h3",{id:"using-a-require"},"Using a require"),(0,l.kt)("p",null,"In case you cannot use or adapt your code to be asynchronous, you can directly import the engine, before requiring the client module. "),(0,l.kt)("p",null,"Of course you need to install it before using it"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @warpjs/engine\n")),(0,l.kt)("p",null,"Then requires it"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"require('@warpjs/engine')\nconst MicroService = require('./client_module.js')\n")),(0,l.kt)("p",null,"Note that you have to manage yourself the dependency of the Warp engine that must be compatible with your client module build."),(0,l.kt)("h2",{id:"get-client-module-functions-and-use-them"},"Get client module functions and use them"),(0,l.kt)("p",null,"Now you have load the client module and warp engine you can set your functions and call them."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { hello } = new MicroService()  \n// Call the function on the client module\nhello('World').then((message) => {  \n  console.log(message)\n})  \n")),(0,l.kt)("h2",{id:"full-example"},"Full example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"require('@warpjs/engine')\nconst MicroService = require('./client_module.js')\nconst { hello } = new MicroService()  \nhello('World').then((message) => {  \n  console.log(message)\n})  \n")))}m.isMDXComponent=!0}}]);