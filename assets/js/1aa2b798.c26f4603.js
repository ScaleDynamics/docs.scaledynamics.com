"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2979],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=o.createContext({}),s=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=s(n),m=r,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||l;return n?o.createElement(f,i(i({ref:t},c),{},{components:n})):o.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a[p]="string"==typeof e?e:r,i[1]=a;for(var s=2;s<l;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3200:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const l={id:"call-from-browser",title:"Call from browser using a script"},i=void 0,a={unversionedId:"module/call-from-browser",id:"version-5.0.0/module/call-from-browser",title:"Call from browser using a script",description:"To use the cloud Node.js module from a Browser script, you need first to import the client module that was generated after build. You also need to import the Warp Engine that will provide you access to the functions of the module you want to use in your script.",source:"@site/versioned_docs/version-5.0.0/module/call-from-browser.md",sourceDirName:"module",slug:"/module/call-from-browser",permalink:"/docs/5.0.0/module/call-from-browser",draft:!1,tags:[],version:"5.0.0",frontMatter:{id:"call-from-browser",title:"Call from browser using a script"},sidebar:"mainSidebar",previous:{title:"TypeScript support",permalink:"/docs/5.0.0/module/typescript"},next:{title:"Call from browser using HTML",permalink:"/docs/5.0.0/module/call-from-html"}},u={},s=[{value:"Import the client module",id:"import-the-client-module",level:2},{value:"Load Warp engine",id:"load-warp-engine",level:2},{value:"Using <code>loadEngine()</code>",id:"using-loadengine",level:3},{value:"Using an import",id:"using-an-import",level:3},{value:"Get client module functions and use them",id:"get-client-module-functions-and-use-them",level:2},{value:"Full example",id:"full-example",level:2}],c={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To use the cloud Node.js module from a Browser script, you need first to import the client module that was generated after build. You also need to import the Warp Engine that will provide you access to the functions of the module you want to use in your script."),(0,r.kt)("h2",{id:"import-the-client-module"},"Import the client module"),(0,r.kt)("p",null,"In order to use it from HTML, your Node.js module should have been build in ",(0,r.kt)("inlineCode",{parentName:"p"},"umd")," format. "),(0,r.kt)("p",null,"Then you can import it with its path:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import MicroService from './client_module.js'\n")),(0,r.kt)("h2",{id:"load-warp-engine"},"Load Warp engine"),(0,r.kt)("p",null,"Warp engine provides you the way to call functions of your Node.js module using its client. You have 2 ways to load it: using ",(0,r.kt)("inlineCode",{parentName:"p"},"loadEngine")," function or using a Warp engine module dependency. "),(0,r.kt)("h3",{id:"using-loadengine"},"Using ",(0,r.kt)("inlineCode",{parentName:"h3"},"loadEngine()")),(0,r.kt)("p",null,"A client module provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"loadEngine")," function. That function will load the latest compatible release of the Warp engine for the Node.js module build. We recommend using this way because you never have to manage the Warp engine version. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import MicroService from './client_module.js'\nMicroService.loadEngine().then( ... )\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import MicroService from './client_module.js'\nasync function start() {\n  await MicroService.loadEngine()\n}\nstart()\n")),(0,r.kt)("h3",{id:"using-an-import"},"Using an import"),(0,r.kt)("p",null,"In case you cannot use or adapt your code to be asynchronous, you can directly import the engine, before requiring the client module. "),(0,r.kt)("p",null,"Of course you need to install it before using it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @warpjs/engine\n")),(0,r.kt)("p",null,"Then requires it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import('@warpjs/engine')\nimport MicroService from './client_module.js'\n")),(0,r.kt)("p",null,"Note that you have to manage yourself the dependency of the Warp engine that must be compatible with your Node.js module build."),(0,r.kt)("h2",{id:"get-client-module-functions-and-use-them"},"Get client module functions and use them"),(0,r.kt)("p",null,"Now you have loaded the client module and warp engine you can set your functions and call them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { hello } = new MicroService()  \n// Call the function of your Node.js module\nhello('World').then((message) => {  \n  console.log(message)\n})  \n")),(0,r.kt)("h2",{id:"full-example"},"Full example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import MicroService from './client_module.js'\nMicroService.loadEngine().then(()=> {\n  const { hello } = new MicroService()  \n  hello('World').then((message) => {  \n    console.log(message)\n  })  \n})\n")))}d.isMDXComponent=!0}}]);