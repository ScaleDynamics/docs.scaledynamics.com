"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7776],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,v=d["".concat(u,".").concat(m)]||d[m]||p[m]||o;return t?r.createElement(v,l(l({ref:n},s),{},{components:t})):r.createElement(v,l({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2360:function(e,n,t){t.d(n,{Z:function(){return l}});var r=t(7294),a=t(6010),o="tabItem_OmH5";function l(e){var n=e.children,t=e.hidden,l=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:t},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return m}});var r=t(7462),a=t(7294),o=t(2389),l=t(7392),i=t(7094),u=t(2466),c=t(6010),s="tabList_uSqn",p="tabItem_LplD";function d(e){var n,t,o,d=e.lazy,m=e.block,v=e.defaultValue,f=e.values,y=e.groupId,b=e.className,h=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=f?f:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),k=(0,l.l)(g,(function(e,n){return e.value===n.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===v?v:null!=(n=null!=v?v:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(o=h[0])?void 0:o.props.value;if(null!==w&&!g.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var E=(0,i.U)(),O=E.tabGroupChoices,C=E.setTabGroupChoices,T=(0,a.useState)(w),D=T[0],j=T[1],I=[],N=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=y){var P=O[y];null!=P&&P!==D&&g.some((function(e){return e.value===P}))&&j(P)}var x=function(e){var n=e.currentTarget,t=I.indexOf(n),r=g[t].value;r!==D&&(N(n),j(r),null!=y&&C(y,r))},_=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r=I.indexOf(e.currentTarget)+1;t=I[r]||I[0];break;case"ArrowLeft":var a=I.indexOf(e.currentTarget)-1;t=I[a]||I[I.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,c.Z)("tabs-container",s)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":m},b)},g.map((function(e){var n=e.value,t=e.label,o=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:D===n?0:-1,"aria-selected":D===n,key:n,ref:function(e){return I.push(e)},onKeyDown:_,onFocus:x,onClick:x},o,{className:(0,c.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":D===n})}),null!=t?t:n)}))),d?(0,a.cloneElement)(h.filter((function(e){return e.props.value===D}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},h.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==D})}))))}function m(e){var n=(0,o.Z)();return a.createElement(d,(0,r.Z)({key:String(n)},e))}},742:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return m}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),l=t(9877),i=t(2360),u=["components"],c={id:"cicd",title:"Continuous Integration & Delivery (CI/CD)",sidebar_label:"CI/CD"},s=void 0,p={unversionedId:"advanced-usage/cicd",id:"advanced-usage/cicd",title:"Continuous Integration & Delivery (CI/CD)",description:"This page is an agnostic overview of how to use our platform to build and deploy your project with a platform like GitHub Actions or GitLab CI. This will give you keys to create the perfect script to deploy your project. There is an example for GitHub Actions and GitLab CI at the end of this page.",source:"@site/docs/advanced-usage/cicd.mdx",sourceDirName:"advanced-usage",slug:"/advanced-usage/cicd",permalink:"/docs/advanced-usage/cicd",draft:!1,tags:[],version:"current",frontMatter:{id:"cicd",title:"Continuous Integration & Delivery (CI/CD)",sidebar_label:"CI/CD"},sidebar:"mainSidebar",previous:{title:"Environment variables",permalink:"/docs/advanced-usage/env-variables"}},d={},m=[{value:"Environment variables",id:"environment-variables",level:2},{value:"Login",id:"login",level:2},{value:"Deploy",id:"deploy",level:2},{value:"Other",id:"other",level:2},{value:"Example",id:"example",level:3}],v={toc:m};function f(e){var n=e.components,t=(0,a.Z)(e,u);return(0,o.kt)("wrapper",(0,r.Z)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This page is an agnostic overview of how to use our platform to build and deploy your project with a platform like GitHub Actions or GitLab CI. This will give you keys to create the perfect script to deploy your project. There is an ",(0,o.kt)("a",{parentName:"p",href:"#example"},"example")," for GitHub Actions and GitLab CI at the end of this page."),(0,o.kt)("h2",{id:"environment-variables"},"Environment variables"),(0,o.kt)("p",null,"First of all, you need to define the environment variables you need to deploy successfully your project. You need at least two values to use them with the CLI:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"your project's name"),(0,o.kt)("li",{parentName:"ul"},"your project's environment")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"env:\n  ORG_PROJECT: my-project\n  DEPLOY_ENV: test\n")),(0,o.kt)("h2",{id:"login"},"Login"),(0,o.kt)("p",null,"To deploy, you need to be connected to your ScaleDynamics account. The easiest way to do it with a CI is to use an API key. You can create one in the API key section of your organization in the ",(0,o.kt)("a",{parentName:"p",href:"https://scaledynamics.com/console"},"ScaleDynamics console"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The API key require Administrator rights.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"- name: Connection to ScaleDynamics\n  run: npx warp login --api-key=${{ secrets.SCALEDYNAMICS_API_KEY }}\n")),(0,o.kt)("h2",{id:"deploy"},"Deploy"),(0,o.kt)("p",null,"To deploy your project, you need to use the environment variables defined earlier and use it with the CLI."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"- name: Deploy application\n  run: npx warp deploy --project ${ORG_PROJECT} --env ${DEPLOY_ENV}\n")),(0,o.kt)("h2",{id:"other"},"Other"),(0,o.kt)("p",null,"You can pretty much add anything else you need to do with your project. Add unit tests, build your project if needed, lint your code, etc."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)(l.Z,{groupId:"cicd-example",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"github",label:"GitHub",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"name: deploy\n\n    # Controls when the workflow will run\n    on:\n      # Allows you to run this workflow manually from the Actions tab\n      workflow_dispatch:\n\n    # A workflow run is made up of one or more jobs that can run sequentially or in parallel\n    jobs:\n      deploy:\n        runs-on: ubuntu-latest\n        env:\n          ORG_PROJECT: my-project\n          DEPLOY_ENV: test\n        steps:\n          - uses: actions/checkout@v2\n\n          - name: Install dependencies application\n            run: npm ci\n\n          # Create an API key in the console and use it for connection (you can add it as a secret)\n          - name: Connection to ScaleDynamics\n            run: npx warp login --api-key=${{ secrets.SCALEDYNAMICS_API_KEY }}\n\n          - name: Build project\n            run: npm run build\n\n          - name: Deploy application\n            run: npx warp deploy --project ${ORG_PROJECT} --env ${DEPLOY_ENV} --force\n"))),(0,o.kt)(i.Z,{value:"gitlab",label:"GitLab",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"image: node:lts\n\nstages:\n  - deploy\n\ndeploy-project:\n  stage: deploy\n  variables:\n    ORG_PROJECT: my-project\n    DEPLOY_ENV: test\n  environment:\n    name: test\n  script:\n    - npm ci\n    - npx warp login --api-key=${SCALEDYNAMICS_API_KEY}\n    - npm run build\n    - npx warp deploy --project=${ORG_PROJECT} --env=${DEPLOY_ENV}\n  when: manual\n")))))}f.isMDXComponent=!0}}]);