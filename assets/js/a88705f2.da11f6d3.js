"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5548],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return p}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),u=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=u(e.components);return o.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),m=u(t),p=r,h=m["".concat(c,".").concat(p)]||m[p]||d[p]||l;return t?o.createElement(h,i(i({ref:n},s),{},{components:t})):o.createElement(h,i({ref:n},s))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var u=2;u<l;u++)i[u]=t[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},590:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return d}});var o=t(7462),r=t(3366),l=(t(7294),t(3905)),i=["components"],a={id:"call-from-html",title:"Call from browser using HTML"},c=void 0,u={unversionedId:"module/call-from-html",id:"module/call-from-html",title:"Call from browser using HTML",description:"To use the cloud Node.js module from a Browser script, you need first to import the client module that was generated after build. You also need to import the Warp Engine that will provide you access to the functions of the module you want to use in your script.",source:"@site/docs/module/call-from-html.md",sourceDirName:"module",slug:"/module/call-from-html",permalink:"/docs/module/call-from-html",tags:[],version:"current",frontMatter:{id:"call-from-html",title:"Call from browser using HTML"},sidebar:"mainSidebar",previous:{title:"Call from browser using a script",permalink:"/docs/module/call-from-browser"},next:{title:"Call from Node.js",permalink:"/docs/module/call-from-nodejs"}},s={},d=[{value:"Import the client module",id:"import-the-client-module",level:2},{value:"Get access to the module",id:"get-access-to-the-module",level:2},{value:"Load Warp engine",id:"load-warp-engine",level:2},{value:"Using <code>loadEngine()</code>",id:"using-loadengine",level:3},{value:"Using an engine script",id:"using-an-engine-script",level:3},{value:"Get client module functions and use them",id:"get-client-module-functions-and-use-them",level:2},{value:"Full example",id:"full-example",level:2}],m={toc:d};function p(e){var n=e.components,t=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"To use the cloud Node.js module from a Browser script, you need first to import the client module that was generated after build. You also need to import the Warp Engine that will provide you access to the functions of the module you want to use in your script."),(0,l.kt)("h2",{id:"import-the-client-module"},"Import the client module"),(0,l.kt)("p",null,"In order to use it from HTML, the client module should have been build in ",(0,l.kt)("inlineCode",{parentName:"p"},"umd")," format."),(0,l.kt)("p",null,"In your html, you have to import it using a script:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<script src="client_module.js"><\/script>\n')),(0,l.kt)("h2",{id:"get-access-to-the-module"},"Get access to the module"),(0,l.kt)("p",null,"Now you loaded it, you need to get access to it. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},"<script>\n  const MicroService = window['module-client']\n<\/script>\n")),(0,l.kt)("h2",{id:"load-warp-engine"},"Load Warp engine"),(0,l.kt)("p",null,"Next step is to load the Warp engine. Warp engine provides you the way to call functions of your Node.js module using its client. You have 2 ways to load it: using ",(0,l.kt)("inlineCode",{parentName:"p"},"loadEngine")," client module function or using a Warp engine module dependency. "),(0,l.kt)("h3",{id:"using-loadengine"},"Using ",(0,l.kt)("inlineCode",{parentName:"h3"},"loadEngine()")),(0,l.kt)("p",null,"A client-module provides a ",(0,l.kt)("inlineCode",{parentName:"p"},"loadEngine")," function. That function will load the latest compatible release of the Warp engine for the client module build. We recommend using this way because you never have to manage the Warp engine version. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},"<script>\n  const MicroService = window['module-client']\n  MicroService.loadEngine().then( ... )\n<\/script>\n")),(0,l.kt)("p",null,"or"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},"<script>\n  const MicroService = window['module-client']\n  async function start() {\n    await MicroService.loadEngine()\n  }\n  start()\n<\/script>\n")),(0,l.kt)("h3",{id:"using-an-engine-script"},"Using an engine script"),(0,l.kt)("p",null,"In case you cannot use or adapt your code to be asynchronous and use the ",(0,l.kt)("inlineCode",{parentName:"p"},"loadEngine")," way, you can directly import the engine from an url before loading the client module. At each release of a warp engine we push it on a CDN. You then have to load the right engine version which should match with the Warp version you used when building the client module. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<script src="https://cdn.scaledynamics.com/warp-engine/4.0.19/engine-web-prod.js"><\/script>\n<script src="client_module.js"><\/script>\n')),(0,l.kt)("p",null,"Note that you have to manage yourself the dependency of the Warp engine that must be compatible with your client module build."),(0,l.kt)("h2",{id:"get-client-module-functions-and-use-them"},"Get client module functions and use them"),(0,l.kt)("p",null,"Now you have loaded the client module and warp engine you can set your functions and call them."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},"<script>\nconst MicroService = window['module-client']\nMicroService.loadEngine().then(()=> {\n  const { hello } = new MicroService()  \n  hello('World').then((message) => {  \n    console.log(message)\n  })  \n})\n<\/script>\n")),(0,l.kt)("h2",{id:"full-example"},"Full example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <meta name="viewport" content="width=device-width,initial-scale=1" />\n    <title>You Node.js module use</title>\n  </head>\n  <body>\n    ...\n    <script src="client_module.js"><\/script>\n    <script>\n      const MicroService = window[\'module-client\']\n      MicroService.loadEngine().then(()=> {\n        const { hello } = new MicroService()  \n        hello(\'World\').then((message) => {  \n          console.log(message)\n        })  \n      })\n    <\/script>\n  </body>\n</html>\n')))}p.isMDXComponent=!0}}]);