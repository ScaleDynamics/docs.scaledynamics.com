"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3452],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>v});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=m(t),d=o,v=u["".concat(s,".").concat(d)]||u[d]||c[d]||r;return t?a.createElement(v,l(l({ref:n},p),{},{components:t})):a.createElement(v,l({ref:n},p))}));function v(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var m=2;m<r;m++)l[m]=t[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},25475:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var a=t(87462),o=(t(67294),t(3905));const r={id:"volumes",title:"Volumes"},l=void 0,i={unversionedId:"services/volumes",id:"version-5.4/services/volumes",title:"Volumes",description:"A volume is a physical space containing files. Each volume as a name. Different types of volume is available, with different characteristics (sharable, posix compliancy, persistance, \u2026).",source:"@site/versioned_docs/version-5.4/services/volumes.md",sourceDirName:"services",slug:"/services/volumes",permalink:"/docs/services/volumes",draft:!1,tags:[],version:"5.4",frontMatter:{id:"volumes",title:"Volumes"},sidebar:"mainSidebar",previous:{title:"Password protection",permalink:"/docs/services/password-protection"},next:{title:"Logs",permalink:"/docs/services/logs"}},s={},m=[{value:"Container needs",id:"container-needs",level:2},{value:"Volume managment",id:"volume-managment",level:2},{value:"Volume linking",id:"volume-linking",level:2},{value:"<code>local</code> volume type",id:"local-volume-type",level:2},{value:"Creation",id:"creation",level:3},{value:"<code>s3fs</code> volume",id:"s3fs-volume",level:2},{value:"S3 connector",id:"s3-connector",level:3},{value:"Creation",id:"creation-1",level:3},{value:"Permissions",id:"permissions",level:3}],p={toc:m},u="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A volume is a physical space containing files. Each volume as a name. Different types of volume is available, with different characteristics (sharable, posix compliancy, persistance, \u2026)."),(0,o.kt)("p",null,"Volume in ",(0,o.kt)("em",{parentName:"p"},"ScaleDynamics")," relies on the following concepts:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The description of container ",(0,o.kt)("em",{parentName:"li"},"needs"),"."),(0,o.kt)("li",{parentName:"ul"},"The managament of physical ",(0,o.kt)("em",{parentName:"li"},"volumes"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"Links")," between container needs and volumes according to the environment.")),(0,o.kt)("h2",{id:"container-needs"},"Container needs"),(0,o.kt)("p",null,"Containers declare in its ",(0,o.kt)("inlineCode",{parentName:"p"},"warp.config.js")," their needs for volumes by adding a ",(0,o.kt)("inlineCode",{parentName:"p"},"volumes")," section."),(0,o.kt)("p",null,"For exemple, a web server could declare the need of a volume to store their assets by a configuration like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n  container: \"my-web-server\",\n  image: {\n    name: 'nginx:latest',\n  },\n  volumes: [ {\n    id: \"asset\",\n    description: 'Files to serve',\n    path: \"/usr/share/nginx/html\",\n    mode: 'ro',\n  } ],\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"id"),": an ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," use by the ",(0,o.kt)("em",{parentName:"li"},"SDK")," during the linking phase."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"description"),": a descrption use for documentation and information during the linking phase."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"path"),": the absolute path inside the container where the volume need to be mounted."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"mode"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ro"),": the container need only to read the volume."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"rw"),": the container need to write on the volume.")))),(0,o.kt)("p",null,"Indeed, a container can declared several different volume needs."),(0,o.kt)("h2",{id:"volume-managment"},"Volume managment"),(0,o.kt)("p",null,"To create a volume, use the following command ",(0,o.kt)("inlineCode",{parentName:"p"},"warp volume create")," and follow interactive questions, or add relevant options."),(0,o.kt)("p",null,"You can, as usual, list all available volumes with ",(0,o.kt)("inlineCode",{parentName:"p"},"warp volume list"),", get more information on a volume with ",(0,o.kt)("inlineCode",{parentName:"p"},"warp volume info")," or delete a volume with ",(0,o.kt)("inlineCode",{parentName:"p"},"warp volume delete"),"."),(0,o.kt)("p",null,"For exemple, for our web server, we create a S3 volume with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ warp volume create --path /\n\u2714 Enter a new volume name: \u2026 my-prod-asset\n\u2714 Pick a model: \u203a s3fs\n\u2714 Select S3 generic connector:  \u203a my-s3-connector\n\u2714 Enter a S3 bucket name: \u2026 prod-asset\nVolume 'my-prod-asset' has been created\n")),(0,o.kt)("p",null,"With the ",(0,o.kt)("inlineCode",{parentName:"p"},"--path /")," option, we are attaching the volume to the organization. So, every projects in that organization will be able to see and use this volume. You can also attach the volume to a specific project by using ",(0,o.kt)("inlineCode",{parentName:"p"},"/my-project"),", or to a specific environment by using ",(0,o.kt)("inlineCode",{parentName:"p"},"/my-project/my-env"),"."),(0,o.kt)("p",null,"Let's pick the ",(0,o.kt)("inlineCode",{parentName:"p"},"s3fs")," model, and use a s3 connector. The connector contains credential and endpoint URL of your S3 storage. At last, enter the name of your S3 bucket where your assets is located."),(0,o.kt)("h2",{id:"volume-linking"},"Volume linking"),(0,o.kt)("p",null,"Now that the container as declared its needs, and volume are created, we need to link the container need with a specific physical volume for an environment. You can link a volume ",(0,o.kt)("inlineCode",{parentName:"p"},"my-prod-asset")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"asset")," need in environment ",(0,o.kt)("inlineCode",{parentName:"p"},"prod"),", and a volume ",(0,o.kt)("inlineCode",{parentName:"p"},"my-dev-asset")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"asset")," need in environment ",(0,o.kt)("inlineCode",{parentName:"p"},"dev"),". With that, when you deploy your container, the volumme ",(0,o.kt)("inlineCode",{parentName:"p"},"my-prod-asset")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"my-dev-asset")," will be mounted automatically in your container depending of the environment ",(0,o.kt)("inlineCode",{parentName:"p"},"prod")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"dev")," you are deploying into."),(0,o.kt)("p",null,"You can link volume with the command ",(0,o.kt)("inlineCode",{parentName:"p"},"warp env volume link"),", and remove link with ",(0,o.kt)("inlineCode",{parentName:"p"},"warp env volume unlink"),". For exemple, let's link our web server assets volume with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ npx warp env volume link\n\u2714 Pick a project: \u203a my-web\n\u2714 Pick an environment in project 'my-web': \u203a prod\n\u2714 Pcik a service: \u203a my-web-server\n\u2714 Pick a service volume ID \u203a asset\n\u2714 Pick a volume: \u203a my-prod-asset\n")),(0,o.kt)("p",null,"But, as usual in interactive mode, the command ",(0,o.kt)("inlineCode",{parentName:"p"},"warp deploy")," will ask all necessary questions if the setting was not done before. For exemple, let's deploy the web server, with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ npx warp deploy .\nProject settings:\n- Configuration: 'warp.config.js'\n- Service container 'my-web-server' (from 'warp.config.js')\n\u2714 Pick a project: \u203a web-server\n\u2714 Pick an environment in project 'web-project': \u203a prod\nYou need to select a volume for service volume ID 'asset'\n\u2714 Pick a volume (Files to serve): \u203a my-prod-asset\nVolume 'my-prod-asset' has been linked with 'my-web-server' service volume ID 'asset' in environment 'prod'\nDeploying project 'jpl-project' in environment 'prod':\n[\u2026]\n- Container 'my-web-server' with base URL 'my-web-server' at https://bk7nxl97zh5c5pf9u<w5e29nid.scaledynamics.cloud\n")),(0,o.kt)("p",null,"Now, you can use the URL to access files in the volume ",(0,o.kt)("inlineCode",{parentName:"p"},"my-prod-asset")," through a ",(0,o.kt)("em",{parentName:"p"},"nginx")," server."),(0,o.kt)("h1",{id:"volume-types-and-characteristics"},"Volume types and characteristics"),(0,o.kt)("p",null,"The following command list all volume types accessible."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ npx warp volume model list\nName    Scope    Instantiable\nlocal   Global   Yes\ns3fs    Global   Yes\n\u2026\n")),(0,o.kt)("p",null,"You can have some details about a volume type with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ npx warp volume model info\n\u2714 Pick a model: \u203a local\nName: local\nDescription: Local volume on runner, persistant, posix compliant, sharable on the same runner\nCurrently instantiable\n")),(0,o.kt)("h2",{id:"local-volume-type"},(0,o.kt)("inlineCode",{parentName:"h2"},"local")," volume type"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"local")," volume type is a local volume on the file system of the runner. So, every containers, from differents services or deployments, running on this runner, share the volume, but containers on different runners access separate copies. With this type of volume, be carefull about vertical scaling, when a new runner is allocated, your ",(0,o.kt)("inlineCode",{parentName:"p"},"local")," volume will be empty on this new runner."),(0,o.kt)("p",null,"This volume type is typically usefull for a single runner infrastructure, or for caching data."),(0,o.kt)("p",null,"The volume is fully ",(0,o.kt)("em",{parentName:"p"},"posix")," compliant and persistant."),(0,o.kt)("h3",{id:"creation"},"Creation"),(0,o.kt)("p",null,"For ",(0,o.kt)("inlineCode",{parentName:"p"},"local")," volume, use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npx warp volume model create --model local\n")),(0,o.kt)("h2",{id:"s3fs-volume"},(0,o.kt)("inlineCode",{parentName:"h2"},"s3fs")," volume"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"s3fs")," volume type is a S3 object storage mounted with ",(0,o.kt)("em",{parentName:"p"},"s3fs")," tool on the runner. So, every containers running on all runners share the same data on this volume. See the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/s3fs-fuse/s3fs-fuse"},(0,o.kt)("em",{parentName:"a"},"s3fs")," documentation")," for more details."),(0,o.kt)("p",null,"This type of volume is typically usefull for sharing assets, for updating assets, \u2026"),(0,o.kt)("p",null,"The volume is persistant and sharable accross different runners but is ",(0,o.kt)("em",{parentName:"p"},"NOT")," fully ",(0,o.kt)("em",{parentName:"p"},"posix")," compliant."),(0,o.kt)("h3",{id:"s3-connector"},"S3 connector"),(0,o.kt)("p",null,"In order ro create a ",(0,o.kt)("em",{parentName:"p"},"s3fs")," volume you need a ",(0,o.kt)("em",{parentName:"p"},"s3")," connector. A S3 connector contains the S3 endpoint URL and its credentials (access key id & secret access key). You can create different volume with the smae S3 connector by chaging the bucket name."),(0,o.kt)("h3",{id:"creation-1"},"Creation"),(0,o.kt)("p",null,"For ",(0,o.kt)("inlineCode",{parentName:"p"},"s3fs")," volume, use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npx warp volume model create --model s3fs\n")),(0,o.kt)("p",null,"You need two things:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A S3 generic connector."),(0,o.kt)("li",{parentName:"ul"},"A S3 bucket name: the name your S3 bucket conformed to the ",(0,o.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html"},"naming rules"),".")),(0,o.kt)("h3",{id:"permissions"},"Permissions"),(0,o.kt)("p",null,"Permissions on ",(0,o.kt)("em",{parentName:"p"},"s3fs")," volume are managed by meta labels. So, you can experience some troubles if your container does not use ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," user. Ownerships and permissions are fully supported when using ",(0,o.kt)("em",{parentName:"p"},"s3fs")," exclusively. But, if you use some other tools to populate your S3 volume, you need to be carreful about meta information. Additionaly, ",(0,o.kt)("em",{parentName:"p"},"s3fs")," can read meta information coming from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/larrabee/s3sync"},"s3sync"),"."),(0,o.kt)("p",null,"In case of permission troubles, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"warp deployment exec")," to open a shell on your container and diagnose the issue."))}c.isMDXComponent=!0}}]);