"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9430],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||l;return n?o.createElement(m,i(i({ref:t},s),{},{components:n})):o.createElement(m,i({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var p=2;p<l;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1161:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const l={slug:"spring-kotlin-petclinic",title:"Deploy a Spring Boot Kotlin application with Docker",authors:["clem"],tags:["Spring","Docker","Kotlin","deploy"]},i=void 0,r={permalink:"/blog/spring-kotlin-petclinic",source:"@site/blog/2022-03-25-spring-kotlin-petclinic/index.mdx",title:"Deploy a Spring Boot Kotlin application with Docker",description:"In this tutorial, we will see how to deploy a Spring Boot Kotlin application with Docker and the ScaleDynamics Platform.",date:"2022-03-25T00:00:00.000Z",formattedDate:"March 25, 2022",tags:[{label:"Spring",permalink:"/blog/tags/spring"},{label:"Docker",permalink:"/blog/tags/docker"},{label:"Kotlin",permalink:"/blog/tags/kotlin"},{label:"deploy",permalink:"/blog/tags/deploy"}],readingTime:4.325,hasTruncateMarker:!0,authors:[{name:"Cl\xe9ment Poisson",title:"Full Stack Engineer @ ScaleDynamics",key:"clem"}],frontMatter:{slug:"spring-kotlin-petclinic",title:"Deploy a Spring Boot Kotlin application with Docker",authors:["clem"],tags:["Spring","Docker","Kotlin","deploy"]},prevItem:{title:"Run a Deno app in production on Cloud",permalink:"/blog/deno-on-cloud"},nextItem:{title:"How to deploy Drupal on cloud with Docker",permalink:"/blog/drupal-on-docker"}},c={authorsImageUrls:[void 0]},p=[{value:"Introduction",id:"introduction",level:2},{value:"Goals",id:"goals",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setup the project",id:"setup-the-project",level:2},{value:"Run the application locally",id:"run-the-application-locally",level:2},{value:"Build the image",id:"build-the-image",level:3},{value:"Run the image",id:"run-the-image",level:3},{value:"Account creation and resource selection",id:"account-creation-and-resource-selection",level:2},{value:"Deploy the application",id:"deploy-the-application",level:2},{value:"Login",id:"login",level:3},{value:"Deploy",id:"deploy",level:3},{value:"Go further",id:"go-further",level:2}],s={toc:p};function u(e){let{components:t,...l}=e;return(0,a.kt)("wrapper",(0,o.Z)({},s,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this tutorial, we will see how to deploy a Spring Boot Kotlin application with Docker and the ScaleDynamics Platform."),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://spring.io/projects/spring-boot"},"Spring Boot")," is a Java-based web application framework that is designed to build simple, stand-alone, production-grade applications. It is built on top of the conventional Spring framework. In Spring Boot everything is auto-configured. It also support Kotlin, which in our case is the language used in the application we will deploy."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://kotlinlang.org/"},"Kotlin")," is a statically typed programming language that is designed to be a modern, safe and efficient alternative to Java. It mainly target the JVM, but can also be compile in JavaScript or native code. Since 2019, Kotlin is the preferred language for Android app developpers."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.docker.com/"},"Docker")," is a containerization platform that allows you to run applications in a container. It is used to build and run applications on the cloud."),(0,a.kt)("h2",{id:"goals"},"Goals"),(0,a.kt)("p",null,"Our goal will be to clone the Spring Petclinic sample application, use the Docker app to run it locally and then deploy it on the ScaleDynamics Platform."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"To follow along, you will need:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.docker.com/get-started"},"Docker")," on your system to run the application locally."),(0,a.kt)("li",{parentName:"ul"},"Node.js and yarn / npm installed. You can go ",(0,a.kt)("a",{parentName:"li",href:"https://nodejs.org/en/download/"},"here")," to download the latest version of Node.js and npm."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://git-scm.com/"},"Git")," installed.")),(0,a.kt)("h2",{id:"setup-the-project"},"Setup the project"),(0,a.kt)("p",null,"The project we will clone is the Spring Petclinic sample appication in Kotlin. You can find the repository ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/spring-petclinic/spring-petclinic-kotlin"},"here"),"."),(0,a.kt)("p",null,"Now let's get the project by running the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/spring-petclinic/spring-petclinic-kotlin.git\n")),(0,a.kt)("p",null,"The project is now ready, let's run it locally with Docker !"),(0,a.kt)("h2",{id:"run-the-application-locally"},"Run the application locally"),(0,a.kt)("p",null,"First of all, you need to launch the Docker app on your system."),(0,a.kt)("h3",{id:"build-the-image"},"Build the image"),(0,a.kt)("p",null,"Before being able to run the application, we need to build the image. The project has already a ready to use Dockerfile, so we just need to run the following command inside the project directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"# the `--tag` option is used to name the image.\ndocker build . --tag spring-petclinic-kotlin\n")),(0,a.kt)("p",null,"I got some error on a Mac M1 chip:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Error docker build",src:n(8978).Z,width:"1956",height:"540"})),(0,a.kt)("p",null,"If you encountered the same issue, you can modify the Dockerfile like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM gradle:7.4.1 AS build\nCOPY --chown=gradle:gradle . /home/gradle/src\nWORKDIR /home/gradle/src\nRUN gradle build\n\nFROM openjdk:8-jre-slim\nEXPOSE 8080\nCOPY --from=build /home/gradle/src/build/libs/spring-petclinic-kotlin-2.6.2.jar /app/\nRUN bash -c \'touch /app/spring-petclinic-kotlin-2.6.2.jar\'\nENTRYPOINT ["java", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseCGroupMemoryLimitForHeap", "-Djava.security.egd=file:/dev/./urandom","-jar","/app/spring-petclinic-kotlin-2.6.2.jar"]\n')),(0,a.kt)("p",null,"Those modifications include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"changing the gradle image"),(0,a.kt)("li",{parentName:"ul"},"changing the name of the jar built by gradle")),(0,a.kt)("p",null,"Now the image is ready to be run."),(0,a.kt)("h3",{id:"run-the-image"},"Run the image"),(0,a.kt)("p",null,"You can run this docker image using the docker application directly or with the command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"docker run -p 8080:8080 spring-petclinic-kotlin\n")),(0,a.kt)("p",null,"The application is now running on ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:8080"},"localhost:8080"),", you can now access it in your browser. It should look like:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Petclinic app",src:n(4236).Z,width:"2880",height:"1526"})),(0,a.kt)("p",null,"Let's deploy it !"),(0,a.kt)("h2",{id:"account-creation-and-resource-selection"},"Account creation and resource selection"),(0,a.kt)("p",null,"To deploy this server on ScaleDynamics's cloud, you need an account and create an environment with a resource for it. The cloud resource provides virtual CPU and storage capacities used to execute the app. In this tutorial we will use a free shared resource available on ScaleDynamics\u2019s cloud. These are the best one for testing. In this tutorial we will see later how you can upgrade to a dedicated production resource on the public cloud provider and region of your choice."),(0,a.kt)("p",null,"If you don't have an account, feel free to create one ",(0,a.kt)("a",{parentName:"p",href:"https://console.scaledynamics.com/auth/signup/"},"here")," (it's free and no credit card are required). Once your account is created, sign in."),(0,a.kt)("p",null,"Let's create a project and an environment on the ScaleDynamics's ",(0,a.kt)("a",{parentName:"p",href:"https://scaledynamics.com/console"},"console"),". Select your organization, create a new project, then create a new environment. Now we need to choose what kind of service we need for our deployment. There are four types:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"managed HTTP docker"),(0,a.kt)("li",{parentName:"ul"},"managed Node.js server"),(0,a.kt)("li",{parentName:"ul"},"managed Node.js module"),(0,a.kt)("li",{parentName:"ul"},"static assets hosting")),(0,a.kt)("p",null,"For our application, we use docker to run it. Let's pick the managed HTTP docker. You can learn more on the other types in the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.scaledynamics.com/"},"ScaleDynamics documentation"),"."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Environment creation",src:n(2773).Z,width:"2760",height:"1422"})),(0,a.kt)("h2",{id:"deploy-the-application"},"Deploy the application"),(0,a.kt)("p",null,"The environment has the resource needed, let's deploy on it."),(0,a.kt)("h3",{id:"login"},"Login"),(0,a.kt)("p",null,"Log into your account and select your organization via the prompt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npx warp login\n")),(0,a.kt)("h3",{id:"deploy"},"Deploy"),(0,a.kt)("p",null,"Finally, we can run the deployment command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npx warp deploy\n")),(0,a.kt)("p",null,"You can see that the Dockerfile was detected by the SDK. You can just follow the prompt, select the project you created, then the environment. The prompt will also ask you for a hostname, you can leave it blank for a random name or use the one you want. Finally, you can select a host. and then it will do it's magic."),(0,a.kt)("p",null,"This command will dump something like this:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Deployment output",src:n(5745).Z,width:"1486",height:"850"})),(0,a.kt)("p",null,"You can now open your browser and go to the URL and TADA ! Your application is live !"),(0,a.kt)("h2",{id:"go-further"},"Go further"),(0,a.kt)("p",null,"This was a simple example of deploying a simple application with docker on the ScaleDynamics Platform. You can pretty much go with any other language, framework or library you want to use."),(0,a.kt)("p",null,"If you are interested in CI/CD, there is a tutorial on how to implement it ",(0,a.kt)("a",{parentName:"p",href:"https://docs.scaledynamics.com/blog/nest-github-actions"},"here"),"."),(0,a.kt)("p",null,"Enjoy !"))}u.isMDXComponent=!0},5745:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/deploy-dump-9c112f356a30a596e9a6840fb754591c.png"},2773:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/env-creation-8258107f3af4adb531794b90c7e559ca.gif"},8978:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/error-docker-build-2107fdcf2c058d2f97138d603ffeba79.png"},4236:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/petclinic-app-abb471639cdf74cb256f1529c225d309.png"}}]);