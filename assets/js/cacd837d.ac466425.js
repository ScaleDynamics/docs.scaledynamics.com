"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6759],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,y=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(y,l(l({ref:t},c),{},{components:n})):a.createElement(y,l({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>E});var a=n(87462),r=n(67294),o=n(86010),l=n(12466),i=n(16550),s=n(91980),u=n(67392),c=n(50012);function p(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function v(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,u]=y({queryString:n,groupId:a}),[p,v]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),f=(()=>{const e=s??p;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),v(e)}),[u,v,o]),tabValues:o}}var f=n(72389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==i&&(p(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},l,{className:(0,o.Z)("tabs__item",b.tabItem,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function g(e){const t=v(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",b.tabList)},r.createElement(h,(0,a.Z)({},e,t)),r.createElement(k,(0,a.Z)({},e,t)))}function E(e){const t=(0,f.Z)();return r.createElement(g,(0,a.Z)({key:String(t)},e))}},10955:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>y,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),o=n(74866),l=n(85162);const i={id:"cicd",title:"Continuous Integration & Delivery (CI/CD)",sidebar_label:"CI/CD"},s=void 0,u={unversionedId:"services/cicd",id:"version-5.1.x/services/cicd",title:"Continuous Integration & Delivery (CI/CD)",description:"This page is an agnostic overview of how to use our platform to build and deploy your project with a platform like GitHub Actions or GitLab CI. This will give you keys to create the perfect script to deploy your project. There is an example for GitHub Actions and GitLab CI at the end of this page.",source:"@site/versioned_docs/version-5.1.x/services/cicd.mdx",sourceDirName:"services",slug:"/services/cicd",permalink:"/docs/5.1.x/services/cicd",draft:!1,tags:[],version:"5.1.x",frontMatter:{id:"cicd",title:"Continuous Integration & Delivery (CI/CD)",sidebar_label:"CI/CD"},sidebar:"mainSidebar",previous:{title:"Moving a service",permalink:"/docs/5.1.x/services/move"},next:{title:"View Services",permalink:"/docs/5.1.x/services/view"}},c={},p=[{value:"Environment variables",id:"environment-variables",level:2},{value:"Login",id:"login",level:2},{value:"Deploy",id:"deploy",level:2},{value:"Example on GitHub and GitLab",id:"example-on-github-and-gitlab",level:2},{value:"Advanced pipelines",id:"advanced-pipelines",level:2}],d={toc:p},m="wrapper";function y(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This page is an agnostic overview of how to use our platform to build and deploy your project with a platform like GitHub Actions or GitLab CI. This will give you keys to create the perfect script to deploy your project. There is an ",(0,r.kt)("a",{parentName:"p",href:"#example"},"example")," for GitHub Actions and GitLab CI at the end of this page."),(0,r.kt)("h2",{id:"environment-variables"},"Environment variables"),(0,r.kt)("p",null,"First of all, you need to define the environment variables you need to deploy successfully your project. You need at least two values to use them with the CLI:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"your project's name"),(0,r.kt)("li",{parentName:"ul"},"your project's environment")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"env:\n  ORG_PROJECT: my-project\n  DEPLOY_ENV: test\n")),(0,r.kt)("h2",{id:"login"},"Login"),(0,r.kt)("p",null,"To deploy, you need to be connected to your ScaleDynamics account. The easiest way to do it with a CI is to use an API key. You can create one in the API key section of your organization in the ",(0,r.kt)("a",{parentName:"p",href:"https://console.scaledynamics.com"},"ScaleDynamics console"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The API key require Administrator rights.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"- name: Connection to ScaleDynamics\n  run: npx warp login --api-key=${{ secrets.SCALEDYNAMICS_API_KEY }}\n")),(0,r.kt)("h2",{id:"deploy"},"Deploy"),(0,r.kt)("p",null,"To deploy your project, you need to use the environment variables defined earlier and use it with the CLI."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"- name: Deploy application\n  run: npx warp deploy --project ${ORG_PROJECT} --env ${DEPLOY_ENV}\n")),(0,r.kt)("h2",{id:"example-on-github-and-gitlab"},"Example on GitHub and GitLab"),(0,r.kt)(o.Z,{groupId:"cicd-example",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"github",label:"GitHub",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"name: deploy\n\n    # Controls when the workflow will run\n    on:\n      # Allows you to run this workflow manually from the Actions tab\n      workflow_dispatch:\n\n    # A workflow run is made up of one or more jobs that can run sequentially or in parallel\n    jobs:\n      deploy:\n        runs-on: ubuntu-latest\n        env:\n          ORG_PROJECT: my-project\n          DEPLOY_ENV: test\n        steps:\n          - uses: actions/checkout@v2\n\n          - name: Install dependencies application\n            run: npm ci\n\n          # Create an API key in the console and use it for connection (you can add it as a secret)\n          - name: Connection to ScaleDynamics\n            run: npx warp login --api-key=${{ secrets.SCALEDYNAMICS_API_KEY }}\n\n          - name: Build project\n            run: npm run build\n\n          - name: Deploy application\n            run: npx warp deploy --project ${ORG_PROJECT} --env ${DEPLOY_ENV} --force\n"))),(0,r.kt)(l.Z,{value:"gitlab",label:"GitLab",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"image: node:lts\n\nstages:\n  - deploy\n\ndeploy-project:\n  stage: deploy\n  variables:\n    ORG_PROJECT: my-project\n    DEPLOY_ENV: test\n  environment:\n    name: test\n  script:\n    - npm ci\n    - npx warp login --api-key=${SCALEDYNAMICS_API_KEY}\n    - npm run build\n    - npx warp deploy --project=${ORG_PROJECT} --env=${DEPLOY_ENV}\n  when: manual\n")))),(0,r.kt)("h2",{id:"advanced-pipelines"},"Advanced pipelines"),(0,r.kt)("p",null,"You can pretty much add anything else you need to do with your project. Add unit tests, build your project if needed, lint your code, etc.\nUse our SDK command lines for interactions with our platform.\nBy default, all SDK CLIs are interactive. In order to use them in CI/CD pipelines, you have a way to indicate all required\nparameters to avoid interactivity to build your pipeline."),(0,r.kt)("p",null,"Here is a snippet of code to create a project, an environment, set the runner and the url to deploy a container and deploys it."),(0,r.kt)("p",null,"The snippet suppose you have environment variables set:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PROJECT"),": the name of the project you want to deploy"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ENV"),": the name of the environment you want to deploy (dev, prod, live, \u2026)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"APIKEY"),": A ScaleDynamics API key with 'Administrator' rights."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SERVICE_NAME"),": the name of the container service to deploy\n(",(0,r.kt)("a",{parentName:"li",href:"https://docs.scaledynamics.com/docs/services/deployment#setting-service-name"},"https://docs.scaledynamics.com/docs/services/deployment#setting-service-name"),"), for exemple 'app'")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"To create an API key, goes in the console on the organization level, and opens 'API key' tab. Then add an API key.\nWhen done, use the token as the ",(0,r.kt)("inlineCode",{parentName:"p"},"APIKEY"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'# Create project\nwarp --api-key "$APIKEY" project create "$PROJECT"\n\n# Create env\nwarp --api-key "$APIKEY" env create "$ENV" --project "$PROJECT"\n\n# Configure env\n\n## Configure URL on a random managed url (use "" to indicate a random url)\nwarp --api-key "$APIKEY" env base-url add "$SERVICE_NAME" "" --project "$PROJECT" --env "$ENV"\n\n## Configure runner\nwarp --api-key "$APIKEY" env runner set "$SERVICE_NAME" "$RUNNER_NAME" --project "$PROJECT" --env "$ENV"\n\n# Deploy a Dockerfile from a \'my-container\' directory\nwarp --api-key "$APIKEY" deploy --project "$PROJECT" --env "$ENV" my-container\n')),(0,r.kt)("p",null,"You can also use CLIs to remove envs or projects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'# Remove env\nwarp --api-key "$APIKEY" env delete "$ENV" --project "$PROJECT" --yes\n\n# Remove the project\nwarp --api-key "$APIKEY" project delete "$PROJECT" --yes\n')))}y.isMDXComponent=!0}}]);