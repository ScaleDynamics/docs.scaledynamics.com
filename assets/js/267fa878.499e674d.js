"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[590],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(h,s(s({ref:n},c),{},{components:t})):a.createElement(h,s({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7641:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return p},assets:function(){return c},toc:function(){return d},default:function(){return m}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),s=["components"],i={slug:"next-js-ssr",title:"Deploy a Next.js SSR application",authors:["clem"],tags:["Next.js","SSR","cloud","ScaleDynamics","deploy"]},l=void 0,p={permalink:"/blog/next-js-ssr",source:"@site/blog/2022-02-10-next-js-srr/index.mdx",title:"Deploy a Next.js SSR application",description:"In this tutorial, we will see how you can deploy a simple server side rendered Next.js application on ScaleDynamics.",date:"2022-02-10T00:00:00.000Z",formattedDate:"February 10, 2022",tags:[{label:"Next.js",permalink:"/blog/tags/next-js"},{label:"SSR",permalink:"/blog/tags/ssr"},{label:"cloud",permalink:"/blog/tags/cloud"},{label:"ScaleDynamics",permalink:"/blog/tags/scale-dynamics"},{label:"deploy",permalink:"/blog/tags/deploy"}],readingTime:6.49,truncated:!0,authors:[{name:"Cl\xe9ment Poisson",title:"Full Stack Engineer @ ScaleDynamics",key:"clem"}],frontMatter:{slug:"next-js-ssr",title:"Deploy a Next.js SSR application",authors:["clem"],tags:["Next.js","SSR","cloud","ScaleDynamics","deploy"]}},c={authorsImageUrls:[void 0]},d=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Goals",id:"goals",children:[],level:2},{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Building the app",id:"building-the-app",children:[],level:2},{value:"Account creation and ressource selection",id:"account-creation-and-ressource-selection",children:[],level:2},{value:"Deployment",id:"deployment",children:[{value:"Configuration file",id:"configuration-file",children:[],level:3},{value:"Build",id:"build",children:[],level:3},{value:"Login",id:"login",children:[],level:3},{value:"Deploy",id:"deploy",children:[],level:3}],level:2},{value:"Go further: dedicated resources",id:"go-further-dedicated-resources",children:[],level:2},{value:"Next steps",id:"next-steps",children:[],level:2}],u={toc:d};function m(e){var n=e.components,i=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this tutorial, we will see how you can deploy a simple server side rendered Next.js application on ScaleDynamics."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Next.js is a powerful React framework for building production ready applications that provides built-in features like routing, hot reload, or static generation, that ease the development. In this tutorial we focus on the Server Side Rendering (SSR) feature. Using SSR, the server is in charge of rendering the pages on each request. SSR is ideal for SEO, because search engines can easily index and crawl content because it can be rendered before the page is loaded."),(0,o.kt)("h2",{id:"goals"},"Goals"),(0,o.kt)("p",null,"Our goal is to create a simple Next.js application using SSR and TypeScript, and deploy it using ScaleDynamics cloud platform that provides free cloud resources for testing. We'll learn how simple it is to configure your cloud resource and deploy your application."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"To follow along, you will need:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Basic knowledge of Javascript / TypeScript"),(0,o.kt)("li",{parentName:"ul"},"Basic knowledge of ",(0,o.kt)("a",{parentName:"li",href:"https://reactjs.org/"},"React")," and ",(0,o.kt)("a",{parentName:"li",href:"https://nextjs.org/"},"Next.js")),(0,o.kt)("li",{parentName:"ul"},"Node.js and yarn / npm installed. You can go ",(0,o.kt)("a",{parentName:"li",href:"https://nodejs.org/en/download/"},"here")," to download the latest version of Node.js and npm.")),(0,o.kt)("h2",{id:"building-the-app"},"Building the app"),(0,o.kt)("p",null,"Let's use ",(0,o.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/api-reference/create-next-app"},"Next.js CLI")," to create an app called ",(0,o.kt)("inlineCode",{parentName:"p"},"next-ssr"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"# you can remove --typescript if you want only Javascript\n# just ignore the typing in the following of the tutorial\nyarn create next-app --typescript\n")),(0,o.kt)("p",null,"To fill our app with some fake data, let's install ",(0,o.kt)("a",{parentName:"p",href:"https://axios-http.com/"},(0,o.kt)("inlineCode",{parentName:"a"},"axios"))," to fetch them:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add axios\n")),(0,o.kt)("p",null,"We will use ",(0,o.kt)("a",{parentName:"p",href:"https://jsonplaceholder.typicode.com/"},"JSONPlaceholder")," to provide some fake user data."),(0,o.kt)("p",null,"To activate the SSR, we need to use a specific function called ",(0,o.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," and add it to our main page. So let's rewrite our ",(0,o.kt)("inlineCode",{parentName:"p"},"pages/index.tsx")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// pages/index.tsx\nimport axios from "axios";\nimport type { GetServerSideProps, NextPage } from "next";\nimport Head from "next/head";\nimport styles from "../styles/Home.module.css";\n\ntype HomeProps = {\n  users: User[];\n};\n\nconst Home = ({ users }: HomeProps): JSX.Element => {\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>Next SSR with ScaleDynamics</title>\n        <meta name="description" content="Simple SSR app deploy with ScaleDynamics platform" />\n        <link rel="icon" href="/favicon.ico" />\n      </Head>\n\n      <main className={styles.main}>\n        <h1 className={styles.title}>Welcome to my SSR App</h1>\n        <pre>{JSON.stringify(users, null, 2)}</pre>\n      </main>\n    </div>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n  const { data } = await axios.get("https://jsonplaceholder.typicode.com/users");\n\n  return {\n    props: {\n      users: data,\n    },\n  };\n};\n\nexport default Home;\n')),(0,o.kt)("p",null,"You will probably get an error from your IDE concerning the type User. Create a folder name ",(0,o.kt)("inlineCode",{parentName:"p"},"domain")," and add a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"user.d.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// domain/user.d.ts\ntype User = {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: {\n    street: string;\n    suite: string;\n    city: string;\n    zipcode: string;\n    geo: {\n      lat: string;\n      lng: string;\n    };\n  };\n  phone: string;\n  website: string;\n  company: {\n    name: string;\n    catchPhrase: string;\n    bs: string;\n  };\n};\n")),(0,o.kt)("p",null,"Now we can see the result by running the application in dev mode:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn dev\n")),(0,o.kt)("p",null,"You should optain:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"First view",src:t(9255).Z,width:"1192",height:"820"})),(0,o.kt)("p",null,"Cool! So now we are fetching data but we are displaying them as JSON data using the ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON.stringify")," function. Let's make that a bit prettier with a component and some css."),(0,o.kt)("p",null,"Create a folder called ",(0,o.kt)("inlineCode",{parentName:"p"},"components")," and two files:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// components/user.tsx\nimport styles from "./user.module.css";\n\ntype UserProps = {\n  user: User;\n};\n\nconst User = ({ user }: UserProps): JSX.Element => {\n  return (\n    <div className={styles.container}>\n      <div className={styles.infos}>\n        <span>Name: {user.name}</span>\n        <span>Username: {user.username}</span>\n        <span>Email: {user.email}</span>\n        <span>Phone: {user.phone}</span>\n      </div>\n      <div className={styles.address}>\n        <span>Street: {user.address.street}</span>\n        <span>Suit: {user.address.suite}</span>\n        <span>City: {user.address.city}</span>\n        <span>Zipcode: {user.address.zipcode}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default User;\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},"/* user.module.css */\n.container {\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  padding: 0;\n  margin: 0;\n  background-color: #fafafa;\n  border: 1px solid #e0e0e0;\n  border-radius: 4px;\n  padding: 10px;\n  margin: 10px;\n  width: 500px;\n  max-width: 500px;\n}\n\n.infos {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  padding: 10px;\n  margin: 0;\n  width: 100%;\n}\n\n.address {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  padding: 10px;\n  margin: 0;\n  width: 100%;\n}\n")),(0,o.kt)("p",null,"Now we need to modify our ",(0,o.kt)("inlineCode",{parentName:"p"},"pages/index.tsx")," file to use our brand new component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// pages/index.tsx\nimport axios from "axios";\nimport type { GetServerSideProps } from "next";\nimport Head from "next/head";\nimport styles from "../styles/Home.module.css";\nimport User from "../components/user/user";\n\ntype HomeProps = {\n  users: User[];\n};\n\nconst Home = ({ users }: HomeProps): JSX.Element => {\n  const usersDisplay = users.map((user: User): JSX.Element => <User key={user.id} user={user} />);\n\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>Next SSR with ScaleDynamics</title>\n        <meta name="description" content="Simple SSR app deploy with ScaleDynamics platform" />\n        <link rel="icon" href="/favicon.ico" />\n      </Head>\n\n      <main className={styles.main}>\n        <h1 className={styles.title}>Welcome to my SSR App</h1>\n        {usersDisplay}\n      </main>\n    </div>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n  const users = await (await axios.get("https://jsonplaceholder.typicode.com/users")).data;\n\n  return {\n    props: {\n      users,\n    },\n  };\n};\n\nexport default Home;\n')),(0,o.kt)("p",null,"With the dev mode running, the app should look like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Finished view",src:t(6837).Z,width:"1514",height:"1378"})),(0,o.kt)("p",null,"The application is ready, now let's look at the deployment part !"),(0,o.kt)("h2",{id:"account-creation-and-ressource-selection"},"Account creation and ressource selection"),(0,o.kt)("p",null,"To deploy this application on ScaleDynamics's cloud, you need an account and create an environment with a ressource for it. The cloud resource provides virtual CPU and storage capacities used to execute the app. In this tutorial we will use a free shared resource available on ScaleDynamics\u2019s cloud. These are the best one for testing. In this tutorial we will see later how you can upgrade to a dedicated production resource on the public cloud provider and region of your choice."),(0,o.kt)("p",null,"If you don't have an account, feel free to create one ",(0,o.kt)("a",{parentName:"p",href:"https://console.scaledynamics.com/auth/signup/"},"here")," (it's free and no credit card are required). Once your account is created, sign in."),(0,o.kt)("p",null,"Let's create a project and an environment on the ScaleDynamics's ",(0,o.kt)("a",{parentName:"p",href:"https://scaledynamics.com/console"},"console"),". Select your organization, create a new project, then create a new environmnent. Now we need to choose what kind of service we need for our deployment. There are four types:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"managed HTTP docker"),(0,o.kt)("li",{parentName:"ul"},"managed Node.js server"),(0,o.kt)("li",{parentName:"ul"},"managed Node.js module"),(0,o.kt)("li",{parentName:"ul"},"static assets hosting")),(0,o.kt)("p",null,"For our Next.js server side rendered, we need a server. Let's pick the managed Node.js server. You can learn more on the other types in the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.scaledynamics.com/"},"ScaleDynamics documentation"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Environment creation",src:t(7155).Z,width:"2610",height:"1504"})),(0,o.kt)("h2",{id:"deployment"},"Deployment"),(0,o.kt)("p",null,"The environment is ready to run our application, let's deploy on it."),(0,o.kt)("h3",{id:"configuration-file"},"Configuration file"),(0,o.kt)("p",null,"First, let's add a configuration to tell the SDK what type of application we want to deploy. At the root of the project, create a ",(0,o.kt)("inlineCode",{parentName:"p"},"warp.config.js")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// warp.config.js\nmodule.exports = {\n  server: "next-ssr",\n};\n')),(0,o.kt)("h3",{id:"build"},"Build"),(0,o.kt)("p",null,"Build the project to let Next optimize and bundle everything for us:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn build\n")),(0,o.kt)("h3",{id:"login"},"Login"),(0,o.kt)("p",null,"Log into your account and select your organization via the prompt:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npx warp login\n")),(0,o.kt)("h3",{id:"deploy"},"Deploy"),(0,o.kt)("p",null,"Finally, we can run the deployment command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npx warp deploy ./\n")),(0,o.kt)("p",null,"This command will dump something like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Deploy dump",src:t(4058).Z,width:"1366",height:"306"})),(0,o.kt)("p",null,"You can see that a server was detected from your configuration file. Now follow the prompt, select the project you created, then the environment. The prompt will also ask you for a hostname, you can leave it blank for a random name or use the one you want. Finally, you can select a host, take the one you prefer, it doesn't really matter."),(0,o.kt)("p",null,"The deployment will be done in a few minutes. At the end, the command will dump something like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Deploy end dump",src:t(8192).Z,width:"1346",height:"426"})),(0,o.kt)("p",null,"You can now open your browser and go to the URL and TADA ! Your Next.js application is live !"),(0,o.kt)("h2",{id:"go-further-dedicated-resources"},"Go further: dedicated resources"),(0,o.kt)("p",null,"If you want to use dedicated resources, you can upgrade dynamically to a non shared resource. As shown below it's as simple as a few mouse clicks."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Upgrade to dedicated",src:t(6545).Z,width:"2610",height:"1504"})),(0,o.kt)("h2",{id:"next-steps"},"Next steps"),(0,o.kt)("p",null,"At this stage, you have a fully functional application. You can learn more on the ScaleDynamics ",(0,o.kt)("a",{parentName:"p",href:"https://docs.scaledynamics.com/"},"documentation"),", like how to get the logs of your server, use a custom domain, implement a CI/CD pipeline, etc."),(0,o.kt)("p",null,"Enjoy !"))}m.isMDXComponent=!0},7155:function(e,n,t){n.Z=t.p+"assets/images/create-env-deploy-4a47be049c74e4b720e5b5815e6c1dcc.gif"},4058:function(e,n,t){n.Z=t.p+"assets/images/deploy-dump-4ae1b7ef4517f523a6c895e504817cf7.png"},8192:function(e,n,t){n.Z=t.p+"assets/images/deploy-end-dump-895646245ce0d8a20d26b83a817f4346.png"},6837:function(e,n,t){n.Z=t.p+"assets/images/finished-view-app-817b07e646f0aab46e30ed0ef95935c7.png"},9255:function(e,n,t){n.Z=t.p+"assets/images/first-view-app-40984a772ba6fa30f3978527fb956880.png"},6545:function(e,n,t){n.Z=t.p+"assets/images/upgrade-resources-d681d9045259ce1378973bec8f4f0d1c.gif"}}]);