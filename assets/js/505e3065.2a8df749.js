"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2233],{3905:function(e,n,r){r.d(n,{Zo:function(){return p},kt:function(){return d}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),u=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},v=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),v=u(r),d=a,f=v["".concat(s,".").concat(d)]||v[d]||c[d]||l;return r?t.createElement(f,o(o({ref:n},p),{},{components:r})):t.createElement(f,o({ref:n},p))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=v;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}v.displayName="MDXCreateElement"},3747:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return v}});var t=r(7462),a=r(3366),l=(r(7294),r(3905)),o=["components"],i={id:"env-variables",title:"Environment variables"},s=void 0,u={unversionedId:"advanced-usage/env-variables",id:"advanced-usage/env-variables",title:"Environment variables",description:"Our platform defines environment variables that you can use in your project, and allow you to add any variables you want in the configuration file.",source:"@site/docs/advanced-usage/env-variables.md",sourceDirName:"advanced-usage",slug:"/advanced-usage/env-variables",permalink:"/docs/advanced-usage/env-variables",tags:[],version:"current",frontMatter:{id:"env-variables",title:"Environment variables"},sidebar:"mainSidebar",previous:{title:"Logs",permalink:"/docs/advanced-usage/logs"},next:{title:"CI/CD",permalink:"/docs/advanced-usage/cicd"}},p=[{value:"Configuration file&#39;s variables",id:"configuration-files-variables",children:[{value:"Example",id:"example",children:[],level:3}],level:2},{value:"Default exported variables",id:"default-exported-variables",children:[{value:"WARP_PORT",id:"warp_port",children:[],level:3},{value:"WARP_ENV",id:"warp_env",children:[],level:3},{value:"PATH",id:"path",children:[],level:3}],level:2}],c={toc:p};function v(e){var n=e.components,r=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Our platform defines environment variables that you can use in your project, and allow you to add any variables you want in the configuration file."),(0,l.kt)("h2",{id:"configuration-files-variables"},"Configuration file's variables"),(0,l.kt)("p",null,"You must declare your environment variable in a ",(0,l.kt)("inlineCode",{parentName:"p"},"variables")," object inside your configuration file. The property names of this object will be the name of your variables. Their value can be a string, an empty string or an object. "),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'variables: {\n  myfirstvar: "value",\n  mysecondvar: "",\n  mythirdvar: {\n    local: true,\n  }\n}\n')),(0,l.kt)("p",null,"If it is an object, then its possible values are:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"{\n  local: true,\n}\n")),(0,l.kt)("p",null,"In this case, the value will be taken from the CLI."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"{\n  empty: true,\n}\n")),(0,l.kt)("p",null,"In this case, the variable will be declared but not assigned a value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"{\n  undef: true,\n}\n")),(0,l.kt)("p",null,"In this case, the variable will be undefined."),(0,l.kt)("h2",{id:"default-exported-variables"},"Default exported variables"),(0,l.kt)("h3",{id:"warp_port"},"WARP_PORT"),(0,l.kt)("p",null,"Only available for a server."),(0,l.kt)("p",null,"Contains the port your server listens on."),(0,l.kt)("p",null,"For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const express = require('express')\nconst app = express()\nconst port = process.env.WARP_PORT\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n")),(0,l.kt)("h3",{id:"warp_env"},"WARP_ENV"),(0,l.kt)("p",null,"Contains the environment your project is running in."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const express = require('express')\nconst app = express()\nconst env = process.env.WARP_ENV\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app is running in env ${env}`)\n})\n")),(0,l.kt)("h3",{id:"path"},"PATH"),(0,l.kt)("p",null,"Only available for a server."),(0,l.kt)("p",null,"Contains the path of the operating system."))}v.isMDXComponent=!0}}]);