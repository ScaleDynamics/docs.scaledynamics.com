"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6849],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>v});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,v=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(v,a(a({ref:t},l),{},{components:n})):r.createElement(v,a({ref:t},l))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},28218:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const o={id:"ist",title:"Inter Service Traffic"},a=void 0,s={unversionedId:"services/ist",id:"version-5.3/services/ist",title:"Inter Service Traffic",description:"We designate by Inter Service Traffic (IST), the mechanism with which your container services of the same deployment can communicate with each other, in a secure and encrypted way on a TCP level, without any configuration on your side.",source:"@site/versioned_docs/version-5.3/services/ist.md",sourceDirName:"services",slug:"/services/ist",permalink:"/docs/services/ist",draft:!1,tags:[],version:"5.3",frontMatter:{id:"ist",title:"Inter Service Traffic"},sidebar:"mainSidebar",previous:{title:"Environment variables",permalink:"/docs/services/env-variables"},next:{title:"Moving a service",permalink:"/docs/services/move"}},c={},p=[{value:"How to setup",id:"how-to-setup",level:2},{value:"Service visibility",id:"service-visibility",level:2}],l={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We designate by Inter Service Traffic (IST), the mechanism with which your container services of the same deployment can communicate with each other, in a secure and encrypted way on a TCP level, without any configuration on your side."),(0,i.kt)("h2",{id:"how-to-setup"},"How to setup"),(0,i.kt)("p",null,"Suppose you want to communicate 2 services, respectively ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"db")," of the same deployment."),(0,i.kt)("p",null,"Your ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," service will automatically have access to a ",(0,i.kt)("inlineCode",{parentName:"p"},"WARP_IST_db")," environment variable. This variable contains either an IP address or a machine name, which you can use as a host in your ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," container to contact your ",(0,i.kt)("inlineCode",{parentName:"p"},"db")," service."),(0,i.kt)("p",null,"For example, in JS this would result in code like this in your ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," service:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const { Pool } = require("pg");\nconst pool = new Pool({\n  user: "dbuser",\n  host: `${process.env.WARP_IST_db}`,\n  database: "mydb",\n  password: "secretpassword",\n  port: 3211,\n});\n')),(0,i.kt)("p",null,"Of course, you have to adapt this to your language, and to your situation."),(0,i.kt)("p",null,"Symmetrically, the ",(0,i.kt)("inlineCode",{parentName:"p"},"db")," service will have the ",(0,i.kt)("inlineCode",{parentName:"p"},"WARP_IST_app")," environment variable if it wants to communicate with your ",(0,i.kt)("inlineCode",{parentName:"p"},"app"),"."),(0,i.kt)("p",null,"These ISTs are secure and encrypted. No other platform service, or any connection from outside, will have access to ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"db")," on the TCP level. These ISTs work of course if your 2 services ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"db")," are on the same runner, but also if they are on two different runners. These ISTs support any port, but are restricted to TCP (no UDP support)."),(0,i.kt)("p",null,"Here ",(0,i.kt)("a",{parentName:"p",href:"https://drive.google.com/file/d/1r7UAi2VgzCODUDz4DksuQuOmMr53gmRQ/view?usp=sharing"},"https://drive.google.com/file/d/1r7UAi2VgzCODUDz4DksuQuOmMr53gmRQ/view?usp=sharing")," an example project that demonstrates communication between two ctna containers calling the ctnb container."),(0,i.kt)("h2",{id:"service-visibility"},"Service visibility"),(0,i.kt)("p",null,"For the moment, in our platform each service has a public url which allows access to the https level. If you want for a service to avoid access on its public url, indicate in the ",(0,i.kt)("inlineCode",{parentName:"p"},"warp.config.js"),"of the service a port not processed by your service. Access via the public url will be directed to this port, which will do nothing."),(0,i.kt)("p",null,"To set the port, use ",(0,i.kt)("inlineCode",{parentName:"p"},"deployment.port")," property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n  docker: "my-docker-service",\n  deployment: {\n    port: 65500,\n  },\n};\n')))}d.isMDXComponent=!0}}]);